{"version":3,"sources":["../src/storageify.js"],"names":["storageify","_serialize","state","JSON","stringify","_deserialize","parse","ex","_key","component","options","_storageify","key","serialize","deserialize","Error","sources","componentSinks","componentReducer$","onion","reducer$","storage","local","getItem","take","map","startWith","storedReducer","prevState","storedState","flatten","stateStorage$","state$","value","storage$","merge","sinks"],"mappings":";;;;;;;;kBAgBwBA,U;;AAhBxB;;;;;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAC1B,SAAOC,KAAKC,SAAL,CAAeF,KAAf,CAAP;AACD;;AAED,SAASG,YAAT,CAAuBH,KAAvB,EAA8B;AAC5B,MAAI;AACF,WAAOC,KAAKG,KAAL,CAAWJ,KAAX,CAAP;AACD,GAFD,CAEE,OAAOK,EAAP,EAAW;AACX,WAAO,KAAK,CAAZ;AACD;AACF;;AAED,IAAMC,OAAO,UAAb;;AAEe,SAASR,UAAT,CAAqBS,SAArB,EAA8C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC3D,SAAOC,YAAYF,SAAZ,EAAuBC,OAAvB,CAAP;AACD;;AAED,SAASC,WAAT,CACEF,SADF,QAGE;AAAA,sBADEG,GACF;AAAA,MADEA,GACF,4BADQJ,IACR;AAAA,4BADcK,SACd;AAAA,MADcA,SACd,kCAD0BZ,UAC1B;AAAA,8BADsCa,WACtC;AAAA,MADsCA,WACtC,oCADoDT,YACpD;;AACA,MAAI,OAAOI,SAAP,KAAqB,UAAzB,EAAqC;AACnC,UAAM,IAAIM,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,MAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,MAAI,OAAOD,WAAP,KAAuB,UAA3B,EAAuC;AACrC,UAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAI,OAAOF,SAAP,KAAqB,UAAzB,EAAqC;AACnC,UAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAO,SAASJ,WAAT,CAAsBK,OAAtB,EAA+B;AACpC,QAAMC,iBAAiBR,UAAUO,OAAV,CAAvB;AACA,QAAME,oBAAoBD,eAAeE,KAAzC;;AAEA,QAAMC,WAAWJ,QAAQK,OAAR,CAAgBC,KAAhB,CACdC,OADc,CACNX,GADM,EAEdY,IAFc,CAET,CAFS,EAGdC,GAHc,CAGVX,WAHU,EAIdW,GAJc,CAIV;AAAA,aACHP,kBAAkBQ,SAAlB,CAA4B,SAASC,aAAT,CAAwBC,SAAxB,EAAmC;AAC7D,eAAOC,eAAeD,SAAtB;AACD,OAFD,CADG;AAAA,KAJU,EASdE,OATc,EAAjB;;AAWA,QAAMC,gBAAgBf,QAAQG,KAAR,CAAca,MAAd,CACnBP,GADmB,CACfZ,SADe,EAEnBY,GAFmB,CAEf;AAAA,aAAU,EAAEb,KAAKA,GAAP,EAAYqB,OAAO/B,KAAnB,EAAV;AAAA,KAFe,CAAtB;;AAIA,QAAMgC,WAAWjB,eAAeI,OAAf,GACb,kBAAGc,KAAH,CAASJ,aAAT,EAAwBd,eAAeI,OAAvC,CADa,GAEbU,aAFJ;;AAIA,QAAMK,qBAAanB,cAAb,IAA6BE,OAAOC,QAApC,EAA8CC,SAASa,QAAvD,GAAN;;AAEA,WAAOE,KAAP;AACD,GA1BD;AA2BD","file":"storageify.js","sourcesContent":["import xs from 'xstream'\n\nfunction _serialize (state) {\n  return JSON.stringify(state)\n}\n\nfunction _deserialize (state) {\n  try {\n    return JSON.parse(state)\n  } catch (ex) {\n    return void 0\n  }\n}\n\nconst _key = 'appState'\n\nexport default function storageify (component, options = {}) {\n  return _storageify(component, options)\n}\n\nfunction _storageify (\n  component,\n  { key = _key, serialize = _serialize, deserialize = _deserialize }\n) {\n  if (typeof component !== 'function') {\n    throw new Error(\"storageify's first argument must be of type 'function'.\")\n  }\n\n  if (typeof key !== 'string') {\n    throw new Error(\"key option must be of type 'string'.\")\n  }\n\n  if (typeof deserialize !== 'function') {\n    throw new Error(\"deserialize option must be of type 'function'.\")\n  }\n\n  if (typeof serialize !== 'function') {\n    throw new Error(\"serialize option must be of type 'function'.\")\n  }\n\n  return function _storageify (sources) {\n    const componentSinks = component(sources)\n    const componentReducer$ = componentSinks.onion\n\n    const reducer$ = sources.storage.local\n      .getItem(key)\n      .take(1)\n      .map(deserialize)\n      .map(storedState =>\n        componentReducer$.startWith(function storedReducer (prevState) {\n          return storedState || prevState\n        })\n      )\n      .flatten()\n\n    const stateStorage$ = sources.onion.state$\n      .map(serialize)\n      .map(state => ({ key: key, value: state }))\n\n    const storage$ = componentSinks.storage\n      ? xs.merge(stateStorage$, componentSinks.storage)\n      : stateStorage$\n\n    const sinks = { ...componentSinks, onion: reducer$, storage: storage$ }\n\n    return sinks\n  }\n}\n"]}